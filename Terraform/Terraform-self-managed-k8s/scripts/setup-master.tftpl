#!/bin/bash

#---------------------------------------------------------
# Set proper hostname, turn off swap and disable UFW firewall
#---------------------------------------------------------
hostnamectl set-hostname $(curl -s http://169.254.169.254/latest/meta-data/local-hostname)
swapoff -a
sed -i '/swap/d' /etc/fstab
mount -a
ufw disable
apt install apt-transport-https ca-certificates curl gnupg2 software-properties-common -y


#---------------------------------------------------------
# Forwarding IPv4 and letting iptables see bridged traffic
#---------------------------------------------------------
if ! (lsmod | grep br_netfilter && lsmod | grep overlay)
then
  cat <<EOF | tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

  modprobe overlay
  modprobe br_netfilter
fi

if ! (sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward)
then
  # sysctl params required by setup, params persist across reboots
  cat <<EOF | tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

  # Apply sysctl params without reboot
  sysctl --system
fi


#---------------------------------------------------------
# Install Container Runtime (CRI-O)
#---------------------------------------------------------
if ! (systemctl status cri-o)
then

  # Add modules conf file
  cat <<EOF | tee /etc/modules-load.d/crio.conf
overlay
br_netfilter
EOF

  # Set up required sysctl params
  cat <<EOF | tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF
  modprobe overlay
  modprobe br_netfilter
  sysctl --system

  # Add CRI-O Repository
  OS=xUbuntu_22.04
  CRIO_VERSION=1.24
  cat <<EOF | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /
EOF
  cat <<EOF | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:$CRIO_VERSION.list
deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$CRIO_VERSION/$OS/ /
EOF

  # Add the GPG key for the CRI-O repository
  curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$CRIO_VERSION/$OS/Release.key | sudo apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add -
  curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | sudo apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add -

  apt-get update
  apt-get install -y cri-o cri-o-runc cri-tools
  systemctl daemon-reload
  systemctl start crio
  systemctl enable crio
fi


#---------------------------------------------------------
# Installing kubeadm, kubelet and kubectl
#---------------------------------------------------------
apt-get install -y apt-transport-https ca-certificates curl gpg

# Download the public signing key for the Kubernetes package repositories
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# Add the appropriate Kubernetes apt repository
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

apt-get update
apt-get install -y kubelet kubeadm kubectl
apt-mark hold kubelet kubeadm kubectl

# (Optional) Enable the kubelet service before running kubeadm
systemctl enable --now kubelet

#---------------------------------------------------------
# Join Cluster
#---------------------------------------------------------
# Kubeadm Join Config yaml
mkdir /etc/kubernetes/
cat <<EOF | tee /etc/kubernetes/kubeadm-join.yaml
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: JoinConfiguration
discovery:
  bootstrapToken:
    token: ${token}
    apiServerEndpoint: "${control_plane_endpoint}:6443"
    caCertHashes:
      - "sha256:${token_hash}"
controlPlane:
  localAPIEndpoint:
    advertiseAddress: $(curl http://169.254.169.254/latest/meta-data/local-ipv4)
    bindPort: 6443
  certificateKey: ${certificate_key}
nodeRegistration:
  name: $(curl -s http://169.254.169.254/latest/meta-data/local-hostname)
  kubeletExtraArgs:
    cloud-provider: external
EOF

kubeadm join --config /etc/kubernetes/kubeadm-join.yaml 