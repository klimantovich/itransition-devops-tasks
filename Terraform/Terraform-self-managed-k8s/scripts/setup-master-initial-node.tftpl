#!/bin/bash

#---------------------------------------------------------
# Set proper hostname, turn off swap and disable UFW firewall
#---------------------------------------------------------
hostnamectl set-hostname $(curl -s http://169.254.169.254/latest/meta-data/local-hostname)    #!!!
swapoff -a
sed -i '/swap/d' /etc/fstab
mount -a
ufw disable
apt install apt-transport-https ca-certificates curl gnupg2 software-properties-common -y


#---------------------------------------------------------
# Forwarding IPv4 and letting iptables see bridged traffic
#---------------------------------------------------------
if ! (lsmod | grep br_netfilter && lsmod | grep overlay)
then
  cat <<EOF | tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

  modprobe overlay
  modprobe br_netfilter
fi

if ! (sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward)
then
  # sysctl params required by setup, params persist across reboots
  cat <<EOF | tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

  # Apply sysctl params without reboot
  sysctl --system
fi


#---------------------------------------------------------
# Install Container Runtime (CRI-O)
#---------------------------------------------------------
if ! (systemctl status cri-o)
then

  # Add modules conf file
  cat <<EOF | tee /etc/modules-load.d/crio.conf
overlay
br_netfilter
EOF

  # Set up required sysctl params
  cat <<EOF | tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF
  modprobe overlay
  modprobe br_netfilter
  sysctl --system

  # Add CRI-O Repository
  OS=xUbuntu_22.04
  CRIO_VERSION=1.24
  cat <<EOF | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /
EOF
  cat <<EOF | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:$CRIO_VERSION.list
deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$CRIO_VERSION/$OS/ /
EOF

  # Add the GPG key for the CRI-O repository
  curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$CRIO_VERSION/$OS/Release.key | sudo apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add -
  curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | sudo apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add -

  apt-get update
  apt-get install -y cri-o cri-o-runc cri-tools
  systemctl daemon-reload
  systemctl start crio
  systemctl enable crio
fi

#---------------------------------------------------------
# Installing kubeadm, kubelet and kubectl
#---------------------------------------------------------
apt-get install -y apt-transport-https ca-certificates curl gpg

# Download the public signing key for the Kubernetes package repositories
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# Add the appropriate Kubernetes apt repository
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

apt-get update
apt-get install -y kubelet kubeadm kubectl
apt-mark hold kubelet kubeadm kubectl

# (Optional) Enable the kubelet service before running kubeadm
systemctl enable --now kubelet

# Install jq and set Kubelet node IP
sudo apt-get install -y jq
local_ip=$(ip --json addr show eth0 | jq -r '.[0].addr_info[] | select(.family == "inet") | .local')
echo "KUBELET_EXTRA_ARGS=--node-ip=$local_ip" | sudo tee /etc/default/kubelet > /dev/null

#---------------------------------------------------------
# Init Cluster
#---------------------------------------------------------
IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)

# Kubeadm Config yaml
mkdir /etc/kubernetes/
cat <<EOF | tee /etc/kubernetes/kubeadm-config.yaml
apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
bootstrapTokens:
  - groups:
      - system:bootstrappers:kubeadm:default-node-token
    ttl: 24h0m0s
    usages:
      - signing
      - authentication
localAPIEndpoint:
  advertiseAddress: $IP
  bindPort: 6443
nodeRegistration:
  criSocket: unix:///var/run/crio/crio.sock
  imagePullPolicy: IfNotPresent
  name: $(curl -s http://169.254.169.254/latest/meta-data/local-hostname)
  kubeletExtraArgs:
    cloud-provider: external
  taints: null

---
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
apiServer:
  timeoutForControlPlane: 4m0s
  extraArgs:
    cloud-provider: external
certificatesDir: /etc/kubernetes/pki
clusterName: kubernetes
controllerManager:
  extraArgs:
    cloud-provider: external
dns: {}
etcd:
  local:
    dataDir: /var/lib/etcd
controlPlaneEndpoint: ${control_plane_endpoint}:6443 
imageRepository: registry.k8s.io
kubernetesVersion: 1.29.0
networking:
  dnsDomain: cluster.local
  podSubnet: ${k8s_pod_network_cidr}
  serviceSubnet: 10.96.0.0/12
scheduler: {}
EOF

kubeadm init --config=/etc/kubernetes/kubeadm-config.yaml --upload-certs > /tmp/kubeadm-init.out

# Config kubectl
mkdir -p $HOME/.kube
cp /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config

# Setup Cloud Controller Manager
# kubectl apply -k 'github.com/kubernetes/cloud-provider-aws/examples/existing-cluster/base/?ref=master'
git clone https://github.com/kubernetes/cloud-provider-aws.git tmp/cloud-provider-aws
kubectl create -k tmp/cloud-provider-aws/examples/existing-cluster/base

# Setup network plugin (Calico)
kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.3/manifests/tigera-operator.yaml
cat <<EOF | tee /etc/kubernetes/custom-resources.yaml
apiVersion: operator.tigera.io/v1
kind: Installation
metadata:
  name: default
spec:
  calicoNetwork:
    bgp: Disabled
    ipPools:
      - blockSize: 26
        cidr: ${k8s_pod_network_cidr}
        encapsulation: VXLANCrossSubnet
        natOutgoing: Enabled
        nodeSelector: all()
EOF
kubectl create -f /etc/kubernetes/custom-resources.yaml

# Get Token and Token CA Hash
TOKEN_HASH=$(openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt \
    | openssl rsa -pubin -outform der 2>/dev/null \
    | openssl dgst -sha256 -hex \
    | sed 's/^.* //')
TOKEN=$(tail -2 /tmp/kubeadm-init.out | awk '{print $5}')
CERTIFICATE_KEY=$(tail -10 /tmp/kubeadm-init.out | head -1 | awk '{print $3}')

# # Save kubeadm join output & kubeconfig to AWS Secretmanager Secrets
apt install awscli -y
export AWS_ACCESS_KEY_ID=${aws_access_key_id}
export AWS_SECRET_ACCESS_KEY=${aws_secret_access_key}
export AWS_DEFAULT_REGION=${aws_default_region}

aws secretsmanager create-secret \
    --name ${kubeadm_token_secret_name} \
    --description "Kubeadm join token" \
    --secret-string $TOKEN
aws secretsmanager create-secret \
    --name ${kubeadm_token_hash_secret_name} \
    --description "Kubeadm join token hash" \
    --secret-string $TOKEN_HASH
aws secretsmanager create-secret \
    --name ${kubeadm_kubeconfig_secret_name} \
    --description "Kubeconfig for cluster" \
    --secret-string "$(cat /etc/kubernetes/admin.conf)"
aws secretsmanager create-secret \
    --name ${kubeadm_certificate_key_secret_name} \
    --description "Kubeadm Certificate Key" \
    --secret-string $CERTIFICATE_KEY

# rm /tmp/kubeadm-init.out
unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_DEFAULT_REGION
unset TOKEN
apt remove -y awscli
